
; 48*48のライフゲーム
; よって、配列の長さは、50*50
; bssで配列を二つ定義

; まずは、それで、初期化。
; インクリメントは2**64か、最低でも2**32までできる。
; 数字として、配列にインクリメントし続けたら、2**8 bitしか入らない。(resbの場合)

; rbxを、カウンターとする。

; システムコール番号はrax、引数はrdi, rsi, rdx, r10, r8, r9の順で与える
; rax以外にrcx, r11も書き換えられる可能性がある
; rbx iとjのカウンター 邪魔しちゃダメ。
; rdx あまりが入る
; r8  除数を入れておくためのもの。一時的
; r9  初期値であるflagを入れておくもの。一時的
; r10 乱数の、一次的な変数を入れておく。
; r11 sleep用。あと、乱数の生成用
; r12 世代の情報を入れたい。
; r13 new_gen付近にてprev_valの、そのセルの情報を入れる。コピー段階では、next世代の情報を入れる。
; r14 周りの生きているセルの個数を入れる。
; r15 print系において、配列の値を入れておくもの。新しい世代の生成の際には、周りのセルの01を一時的に入れておくもの。

; mulは、rax*op = rax:rdxになる

; divは、商がrax、余りがrdxに入る。
; スタックレジスタを使えなかった....

section .data
    on     db "0"
    off    db 0x2d; <- "-"
    err    db "e"
    return db 0x0a
    ; init_val db

    ; init_val_array db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0


section .bss
    ; 10*10の配列だとする。
    prev_val resb 2500
    next_val resb 2500


section .text
    global _start

next_val_is_on:
    mov r9, 1
    jmp return_to_done_gen_rand

next_val_is_off:
    mov r9, 0
    jmp return_to_done_gen_rand

gen_rand:

    ; static uint32_t y = 2463534242;
    ; y = y ^ (y << 13); y = y ^ (y >> 17);
    ; return y = y ^ (y << 5);

    ; r9に入れさえすればいい。
    mov rax, r11
    mul r11 ; r11 ^ 2の結果をrax:rdxに代入。なんとなくraxを使う。
    sar rax, 1

    ; nop

    ; raxの値をr11に入れたのち、
    ; これが偶数か奇数かを判定
    mov r11, rax
    ; mov rax, r11

    ; nop

    mov r8, 2
    xor rdx, rdx
    div r8; b

    cmp rdx, 1; b
    je next_val_is_on

    cmp rdx, 0
    je next_val_is_off
return_to_done_gen_rand:
    jmp done_gen_rand


print_off:
    ; write
    mov rax, 1
    mov rdi, 1
    mov rsi, off
    mov rdx, 1
    syscall

    jmp after_each_print
    ; ret

print_on:
    ; write
    mov rax, 1
    mov rdi, 1
    mov rsi, on
    mov rdx, 1
    syscall

    jmp after_each_print
    ; ret

print_ret:

    nop

    mov rax, 1
    mov rdi, 1
    mov rsi, return
    mov rdx, 1
    syscall

    nop

    jmp after_ret_print

print_func:
    ; 一回prev_valをprintする感じで。
    xor rbx, rbx
print_each:
    cmp rbx, 2500
    jge return_from_print

        ; if( rbx <= 49 )
        cmp rbx, 49
        jle after_each_print

        ; if( rbx >= 2450 )
        cmp rbx, 2450
        jge after_each_print

        mov rax, rbx
        mov r8, 50
        xor rdx, rdx
        div r8

        ; if( rbx % 50 == 0 )
        cmp rdx, 0
        je  after_each_print

        mov rax, rbx
        mov r8, 50
        xor rdx, rdx
        div r8

        ; if( rbx % 50 == 49 )
        cmp rdx, 49
        je  after_each_print



    xor r15, r15
    movzx r15, byte [prev_val + rbx] ; r15が64bitなので、ゼロ拡張(prev_valは8bit)

    cmp r15, 0
    je print_off
    cmp r15, 1
    je print_on

; print系のcontinueと、次のループへはここ。
after_each_print:

    mov rax, rbx
    mov r8, 50
    xor rdx, rdx
    div r8

    ; if( rbx % 50 == 49 )
    cmp rdx, 49
    je  print_ret

after_ret_print:
    inc rbx
    jmp print_each


return_from_print:
    jmp after_first_print

zero_func:
    mov r9, 0
    mov [prev_val + rbx], r9
    jmp end_init_this_num

_start:
    xor r12, r12; 世代
    xor rbx, rbx
    xor r11, r11
    mov r11, 2463534242 ; seed
init_val:
    ; randに使うレジスタを初期化
    cmp rbx, 2500
    jge after_init_val

        ; rbxが、49以下の時
        ; rbxが、2450以上の時
        ; 0の壁を入れる

        ; if( rbx <= 49 )
        cmp rbx, 49
        jle zero_func

        ; if( rbx >= 2450 )
        cmp rbx, 2450
        jge zero_func

        mov rax, rbx
        mov r8, 50
        xor rdx, rdx
        div r8
        ; if( rbx % 50 == 0 )
        cmp rdx, 0
        je  zero_func

        mov rax, rbx
        mov r8, 50
        xor rdx, rdx
        div r8
        ; if( rbx % 50 == 49 )
        cmp rdx, 49
        je  zero_func

        ; ここを本当はランダムにしなければならない
        xor rax, rax
        jmp gen_rand
done_gen_rand:

        mov [prev_val + rbx], r9

    jmp end_init_this_num

end_init_this_num:
    inc rbx
    jmp init_val

after_init_val:
    ; nop
    jmp print_func

after_first_print:
    jmp consider_next_gen


consider_next_gen:

    xor rbx, rbx
    cmp rbx, 2500
    jge after_consider_next_gen

        ; if( rbx <= 49 )
        cmp rbx, 49
        jle next_zero_func

        ; if( rbx >= 2450 )
        cmp rbx, 2450
        jge next_zero_func

        mov rax, rbx
        mov r8, 50
        xor rdx, rdx
        div r8
        ; if( rbx % 50 == 0 )
        cmp rdx, 0
        je  next_zero_func

        mov rax, rbx
        mov r8, 50
        xor rdx, rdx
        div r8
        ; if( rbx % 50 == 49 )
        cmp rdx, 49
        je  next_zero_func

        ; ここからが、周りの個数を調べる。
        xor r14, r14
        ; 1
        movzx r15, byte [prev_val + rbx - 51]
        add r14, r15
        ; 2
        movzx r15, byte [prev_val + rbx - 50]
        add r14, r15
        ; 3
        movzx r15, byte [prev_val + rbx - 49]
        add r14, r15
        ; 4
        movzx r15, byte [prev_val + rbx - 1]
        add r14, r15
        ; 6
        movzx r15, byte [prev_val + rbx + 1]
        add r14, r15
        ; 7
        movzx r15, byte [prev_val + rbx + 49]
        add r14, r15
        ; 8
        movzx r15, byte [prev_val + rbx + 50]
        add r14, r15
        ; 9
        movzx r15, byte [prev_val + rbx + 51]
        add r14, r15

        xor r13, r13
        movzx r13, byte [prev_val + rbx]


        ; 生きていた場合
        cmp r13, 1
        je consider_next_gen_when_alive

        ; 死んでいた場合
        cmp r13, 0
        je consider_next_gen_when_die

done_this_next_num:
    inc rbx
    jmp reset_rbx


reset_rbx:
    xor rbx, rbx
    jmp after_consider_next_gen
after_consider_next_gen:
    ; ここから、古いものを新しいものにコピーして行く。
    ; 新しいものを古いものをコピーしたら、次のサイクルへ。

    cmp rbx, 2500
    jge done_this_loop_lets_go_next_loop

        movzx r13, byte [next_val + rbx]
        mov [prev_val + rbx], r13
        inc rbx
        jmp after_consider_next_gen

done_this_loop_lets_go_next_loop:
    ; ここで最後終わる判定書けばいいか。

    inc r12
    cmp r12, 1000
    jge exit

    ; ; sleep
    ; mov rax, 35
    ; mov rdi, 1
    ; mov rsi, 0
    ; syscall

    xor r11, r11
sleep:
    cmp r11, 2000000000
    jge next_loop
    nop
    nop
    inc r11
    jmp sleep

next_loop:
    jmp print_func

exit:
    ; exit(0)
    mov rax, 60
    mov rdi, 0
    syscall


consider_next_gen_when_alive:
    cmp r14, 2
    je dicide_live

    cmp r14, 3
    je dicide_live

    jmp dicide_die

consider_next_gen_when_die:
    cmp r14, 3
    je dicide_live

    jmp dicide_die

dicide_live:
    mov r9, 1
    mov [prev_val + rbx], r9
    jmp done_this_next_num

dicide_die:
    mov r9, 0
    mov [prev_val + rbx], r9
    jmp done_this_next_num

; 次の世代の、壁を作る仕事。
next_zero_func:
    mov r9, 0
    mov [next_val + rbx], r9
    jmp done_this_next_num

